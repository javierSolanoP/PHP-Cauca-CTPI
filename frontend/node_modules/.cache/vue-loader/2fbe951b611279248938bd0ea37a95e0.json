{"remainingRequest":"C:\\xampp\\htdocs\\plantilla\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\plantilla\\src\\components\\NotificationPlugin\\Notification.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\plantilla\\src\\components\\NotificationPlugin\\Notification.vue","mtime":1634347484563},{"path":"C:\\xampp\\htdocs\\plantilla\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\plantilla\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\xampp\\htdocs\\plantilla\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\plantilla\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default{\r\n  name: 'notification',\r\n  components: {\r\n    contentRender:{\r\n      props: ['component'],\r\n      render(h){\r\n        return h(this.component)\r\n      }\r\n    }\r\n  },\r\n  props:{\r\n    message: String,\r\n    title: String,\r\n    icon: String,\r\n    verticalAlign:{\r\n      type: String,\r\n      default: 'top',\r\n      validator: value => {\r\n        let acceptedValues = ['top', 'bottom'];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    horizontalAlign:{\r\n      type: String,\r\n      default: 'right',\r\n      validator: value => {\r\n        let acceptedValues = ['left','center','right'];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'info',\r\n      validator: value => {\r\n        let acceptedValues = [\r\n          'info',\r\n          'primary',\r\n          'danger',\r\n          'warning',\r\n          'success'\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    timeout: {\r\n      type: Number,\r\n      default: 5000,\r\n      validator: value => {\r\n        return value >= 0;\r\n      }\r\n    },\r\n    timestamp: {\r\n      type: Date,\r\n      default: () => new Date()\r\n    },\r\n    component: {\r\n      type: [Object, Function]\r\n    },\r\n    closeOnClick:{\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    clickHandler: Function,\r\n    showClose:{\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  computed:{\r\n    hasIcon() {\r\n      return this.icon && this.icon.length > 0;\r\n    },\r\n    alertType(){\r\n      return `alert-${this.type}`;\r\n    },\r\n    customPosition(){\r\n      let initialMargin = 20;\r\n      let alertHeight = this.elmHeight + 10;\r\n      let sameAlertsCount = this.$notifications.state.filter(alert => {\r\n        return (\r\n          alert.horizontalAlign === this.horizontalAlign &&\r\n          alert.verticalAlign === this.verticalAlign &&\r\n          alert.timestamp <= this.timestamp\r\n        );\r\n      }).length;\r\n      if (this.$notifications.settings.overlap) {\r\n        sameAlertsCount = 1;\r\n      }\r\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\r\n      let styles = {};\r\n      if (this.verticalAlign === 'top') {\r\n        styles.top = `${pixels}px`;\r\n      } else {\r\n        styles.bottom = `${pixels}px`;\r\n      }\r\n      return styles;\r\n    }\r\n  },\r\n  methods:{\r\n    close(){\r\n      this.$emit('close', this.timestamp);\r\n    },\r\n    tryClose(evt){\r\n      if(this.clickHandler){\r\n        this.clickHandler(evt,this);\r\n      }\r\n      if(this.closeOnClick){\r\n        this.close();\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      elmHeight: 0\r\n    };\r\n  },\r\n  mounted(){\r\n    this.elmHeight = this.$el.clientHeight;\r\n    if (this.timeout) {\r\n      setTimeout(this.close, this.timeout);\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Notification.vue"],"names":[],"mappingsfile":"Notification.vue","sourceRoot":"src/components/NotificationPlugin","sourcesContent":["<template>\r\n  <div @click=\"tryClose\"\r\n       data-notify=\"container\"\r\n       class=\"alert open\"\r\n       :class=\"[{'alert-with-icon': icon}, verticalAlign, horizontalAlign, alertType]\"\r\n       role=\"alert\"\r\n       :style=\"customPosition\">\r\n    <button\r\n        v-if=\"showClose\"\r\n        type=\"button\"\r\n        aria-hidden=\"true\"\r\n        class=\"close col-xs-1\"\r\n        data-notify=\"dismiss\"\r\n        @click=\"close\">\r\n        <i class=\"tim-icons icon-simple-remove\"></i>\r\n    </button>\r\n\r\n    <span v-if=\"icon\" data-notify=\"icon\" :class=\"['alert-icon', icon]\"></span>\r\n    <div data-notify=\"message\">\r\n      <div v-if=\"title\" class=\"title\"><b>{{title}}<br/></b></div>\r\n      <div v-if=\"message\" v-html=\"message\"></div>\r\n      <content-render v-if=\"!message && component\" :component=\"component\"></content-render>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default{\r\n  name: 'notification',\r\n  components: {\r\n    contentRender:{\r\n      props: ['component'],\r\n      render(h){\r\n        return h(this.component)\r\n      }\r\n    }\r\n  },\r\n  props:{\r\n    message: String,\r\n    title: String,\r\n    icon: String,\r\n    verticalAlign:{\r\n      type: String,\r\n      default: 'top',\r\n      validator: value => {\r\n        let acceptedValues = ['top', 'bottom'];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    horizontalAlign:{\r\n      type: String,\r\n      default: 'right',\r\n      validator: value => {\r\n        let acceptedValues = ['left','center','right'];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'info',\r\n      validator: value => {\r\n        let acceptedValues = [\r\n          'info',\r\n          'primary',\r\n          'danger',\r\n          'warning',\r\n          'success'\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      }\r\n    },\r\n    timeout: {\r\n      type: Number,\r\n      default: 5000,\r\n      validator: value => {\r\n        return value >= 0;\r\n      }\r\n    },\r\n    timestamp: {\r\n      type: Date,\r\n      default: () => new Date()\r\n    },\r\n    component: {\r\n      type: [Object, Function]\r\n    },\r\n    closeOnClick:{\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    clickHandler: Function,\r\n    showClose:{\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  computed:{\r\n    hasIcon() {\r\n      return this.icon && this.icon.length > 0;\r\n    },\r\n    alertType(){\r\n      return `alert-${this.type}`;\r\n    },\r\n    customPosition(){\r\n      let initialMargin = 20;\r\n      let alertHeight = this.elmHeight + 10;\r\n      let sameAlertsCount = this.$notifications.state.filter(alert => {\r\n        return (\r\n          alert.horizontalAlign === this.horizontalAlign &&\r\n          alert.verticalAlign === this.verticalAlign &&\r\n          alert.timestamp <= this.timestamp\r\n        );\r\n      }).length;\r\n      if (this.$notifications.settings.overlap) {\r\n        sameAlertsCount = 1;\r\n      }\r\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\r\n      let styles = {};\r\n      if (this.verticalAlign === 'top') {\r\n        styles.top = `${pixels}px`;\r\n      } else {\r\n        styles.bottom = `${pixels}px`;\r\n      }\r\n      return styles;\r\n    }\r\n  },\r\n  methods:{\r\n    close(){\r\n      this.$emit('close', this.timestamp);\r\n    },\r\n    tryClose(evt){\r\n      if(this.clickHandler){\r\n        this.clickHandler(evt,this);\r\n      }\r\n      if(this.closeOnClick){\r\n        this.close();\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      elmHeight: 0\r\n    };\r\n  },\r\n  mounted(){\r\n    this.elmHeight = this.$el.clientHeight;\r\n    if (this.timeout) {\r\n      setTimeout(this.close, this.timeout);\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n.notifications .alert {\r\n  position: fixed;\r\n  z-index: 10000;\r\n  text-align: left;\r\n\r\n  &[data-notify='container'] {\r\n    width: 480px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &.center {\r\n    left: 0px;\r\n    right: 0px;\r\n    margin: 0 auto;\r\n  }\r\n  &.left {\r\n    left: 20px;\r\n  }\r\n  &.right {\r\n    right: 20px;\r\n  }\r\n}\r\n</style>\r\n"]}]}